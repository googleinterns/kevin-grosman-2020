#!/usr/bin/env bash

##
# Loops through all provided compilation flags 5 times, each time recompiling aGMM as specified and measuring the desired portion of the CUJ specified by INPUT_FILE.
# Appends the STASHED_SHORT_SUMMARY from each run to the AGGREGATED_DATA_FILE for the specified INPUT_FILE.
# Stores the following files at /mega_data/<INPUT_FILE_NAME>/<DATE>/:
# - (all_data.txt) a log containing formatted data from each measurement (acquired via a call to manipulateProfilesAndTest).
# - (summary.txt) a summary containing average action durations for each compilation flag (over all iterations).
#
# @param INPUT_FILE (Formatted with the following on consecutive lines: PRE-CUJ, POST_CUJ, NUM_ITERS, and optionally RECORD (a line with an "r" to indicate that you'd like to record). See CUJS/ for an example file.
# @param COMPILATION_FLAGS (all arguments after INPUT_FILE, e - empty profile, p - compile actions in Pre-CUJ, c - compile entire CUJ, a - compile all code).

# Example: ./megaTest CUJS/takeout.txt e p c a 
# Result: Will loop through compiling on an empty profile, one containing the pre-CUJ, one containing the entire CUJ and one containing all of aGMM, measuring the desired CUJ each time (as specified by the takeout file).
#
# Example: ./megaTest CUJS/takeout.txt a e
# Result: Will alternate between compiling all of aGMM and compiling nothing, measuring the desired CUJ each time (as specified by the takeout file).




INPUT_FILE=${1:-input.txt}
PRE_CUJ=$(sed '1q;d' $INPUT_FILE)
POST_CUJ=$(sed '2q;d' $INPUT_FILE)
ITERS=$(sed '3q;d' $INPUT_FILE)
RECORD=$(sed '4q;d' $INPUT_FILE)
POST_CUJ_STR_ARRAY=$(./peelHardBrackets $POST_CUJ) #peel off hard brackets
LOOPS=2 #Probably should make this an input
let "TOTAL_ITERS=$ITERS * $LOOPS"

#Initializing variables
STASHED_SHORT_SUMMARY="/tmp/manipulate_short_summary.txt" #location where ./manipulateProfilesAndTest will dump a short summary of time data and size of profile/app
STASHED_APP_SIZE="/tmp/manipulate_app_size.txt" #location where ./manipulateProfilesAndTest will dump the app size
STASHED_FOLDER="/tmp/manipulate_folder.txt" #location where ./manipulateProfilesAndTest will dump its folder
STASHED_COMPILED_ACTIONS="/tmp/manipulate_compiled_actions.txt"
STASHED_RAW_DURATIONS="/tmp/execute_raw_durations.txt"
STASHING_DUMPED_DATA="/tmp/mega_dumped_data.txt"
STASHING_SUMMARY_TABLES="/tmp/mega_summary_tables.txt"
DATE=$(date '+%m-%d-%Y--%H:%M:%S')
INPUT_FILE_NAME="${INPUT_FILE##*/}" #remove folders from file name
INPUT_FILE_NAME="${INPUT_FILE_NAME%.*}" #remove file extension from file name

#Create the folder hierarchy for the data produced by the test, if it doesn't exist
FOLDER="mega_data/${INPUT_FILE_NAME}"
mkdir $FOLDER  2> /dev/null
FOLDER="mega_data/${INPUT_FILE_NAME}/${DATE}"
mkdir $FOLDER  2> /dev/null
AGGREGATED_DATA_FILE="${FOLDER}/all_data.txt"
TEST_SUMMARY="${FOLDER}/summary.txt"
CPU_STATUSES=$(./getCPUs)
FOLDERS_WITH_VIDS=""
shift ##shift args such that remaining args are the compilation settings

#Headers/Footers
HEADER_FOOTER="-----------------------------------------------------------------CPU STATUSES: $CPU_STATUSES----------COMPILATION FLAGS: $@----------$DATE-----------------------------------------------------------------" 
SUMMARY_HF="\n************************************************MEGA TEST SUMMARY:*************************************************"
SECTION_SPLITTER="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

echo "" > $STASHING_DUMPED_DATA

echo "force-stopping app..."
adb shell am force-stop com.google.android.apps.maps

echo "warming up..."
./runCujNTimes $INPUT_FILE w 0

echo $HEADER_FOOTER > $AGGREGATED_DATA_FILE
echo $HEADER_FOOTER 

echo -e $SUMMARY_HF > $TEST_SUMMARY
echo "PRE CUJ:      $PRE_CUJ" >> $TEST_SUMMARY
echo "MEASURED CUJ: $POST_CUJ" >> $TEST_SUMMARY
echo "" >> $TEST_SUMMARY
echo "$SECTION_SPLITTER" >> $TEST_SUMMARY


for ((run=0;run<$LOOPS;run++))
do
	for COMPILATION_FLAG in "$@"
	do
		echo "DOING $COMPILATION_FLAG TEST..." 
		./manipulateProfilesAndTest $INPUT_FILE $COMPILATION_FLAG
		echo "" >> $AGGREGATED_DATA_FILE
		cat $STASHED_SHORT_SUMMARY >> $AGGREGATED_DATA_FILE
		COMPILED_ACTIONS=$(cat $STASHED_COMPILED_ACTIONS)
		APP_SIZE=$(cat $STASHED_APP_SIZE)
		MPT_FOLDER=$(cat $STASHED_FOLDER)
		FOLDERS_WITH_VIDS="$FOLDERS_WITH_VIDS $MPT_FOLDER"
		STRING_DURATIONS=$(cat $STASHED_RAW_DURATIONS)
		STRING_DURATIONS=$(./peelHardBrackets "$STRING_DURATIONS") #peel off hard brackets
		if [ $run = "0" ] #Report which actions were compiled for each flag on the first loop through thems
		then
			echo "ACTIONS COMPILED FOR FLAG ${COMPILATION_FLAG}: $COMPILED_ACTIONS" >> $TEST_SUMMARY
		fi
		echo $APP_SIZE >> $STASHING_DUMPED_DATA
		echo $MPT_FOLDER >> $STASHING_DUMPED_DATA
		echo "$STRING_DURATIONS" >> $STASHING_DUMPED_DATA
		echo "" >> $STASHING_DUMPED_DATA
	done
done

echo "" >> $TEST_SUMMARY
echo "$SECTION_SPLITTER" >> $TEST_SUMMARY

echo "Generating mega test summary..."
java dataAggregation.AggregateMegaData "$STASHING_DUMPED_DATA" "$STASHING_SUMMARY_TABLES" "$POST_CUJ_STR_ARRAY" "$TOTAL_ITERS" "$FOLDER" "$*"


cat $STASHING_SUMMARY_TABLES >> $TEST_SUMMARY
echo -e $SUMMARY_HF >> $TEST_SUMMARY

#format spacing and cat data summary to aggregated data file
cat $TEST_SUMMARY >> $AGGREGATED_DATA_FILE
echo "" >> $AGGREGATED_DATA_FILE
echo $HEADER_FOOTER >> $AGGREGATED_DATA_FILE

echo "Making sure full videos are deleted......."
for MPT_FOLDER in "$FOLDERS_WITH_VIDS"
do
	rm ${MPT_FOLDER}/full_video.mp4 #2> /dev/null
done

#Display the summary table
cat $TEST_SUMMARY
echo $HEADER_FOOTER 
