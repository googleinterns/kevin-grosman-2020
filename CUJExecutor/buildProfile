#!/usr/bin/env bash
	


# Stashes a profile built based on the passed COMPILATION_SETTING, which is a base profile (which could be a file location or one of the tokens 
# {e - empty, u - cloud, s - startup}), followed by a colon, and then a (possibly empty) sequence of compliation flags
# 
# By default, if a prefix of a profile setting (e.g. e:pm is a prefix of e:pmcm) has a corresponding profile in the directory for passed CUJ, 
# we will build on top of that profile (to save time and to decrease noise in comparisons between two settings if one is a prefix of the other). 
# Further, during building, all prefix compilation settings will be stashed so that later calls may later use these intermediate profiles.
# 
# (e.g. if a call to this script is made on the takeout.txt CUJ and the compilation setting e:pmcm after after a call on the same CUJ and the 
# compilation setting e:pm, then the profile for e:pmcm will be built on top of the one for e:pm and the prefix profile for e:pmc will also be 
# saved to the corresponding directory)
# 
# if the -NC (or --no-caching) flag is provided, the profile will be built from scratch (starting with the base profile, rather than a cached 
# prefix profile) and further calls cannot build from prefix profiles generated by the call (although prefix profiles will be created and saved 
# to the appropriate directory). Further, the resulting profiles will have the sinature "-NC-" and the date. (This flag is intended to be useful 
# for creating many instances of a profile and performing operations on them, such as intersecting them.)
#
# If the passed base profile is a file location rather than a token, the profile will always be built from scratch (starting with the base 
# profile), and the resulting profile will not be stashed (neither will any intermediate profiles).
# 
# e.g: 
# 
# ./buildProfile CUJS/takeout.txt utilityProfiles/cloudProfile.prof:f
# 	Result: the cloud profile is copied to /tmp/build_created_profile.txt and then the first action in the cuj is added to the profile
# 
# ./buildProfile CUJS/takeout.txt s:mmp
# 	Result: A profile is built by starting with the startup profile and adding to it by executing the measuredCUJ twice and then the preCUJ 
#		once (with appropriate waits after all 3 sections of the CUJ are completed). If a prefix profile exists in the appropriate directory, 
#		we will built on top of that. All subsequent intermediate prefix profiles will be saved.
#
# ./buildProfile --no-caching CUJS/takeout.txt s:mmp
# 	Result: A profile is built by starting with the startup profile and adding to it by executing the measuredCUJ twice and then the preCUJ once 
#		(with appropriate waits after all 3 sections of the CUJ are completed). We will build from scratch (from the provided base profile) 
# 		and no further calls will be able to use any of the profiles generated
#
# @param INPUT_FILE - Formatted with the following on consecutive lines: PRE-CUJ, MEASURED_CUJ, POST_CUJ, NUM_ITERS, and optionally RECORD (a line 
#		      with an "r" to indicate that you'd like to record). See CUJS/ for an example file.
# @param COMPILATION_SETTING - a base profile (one of a - all, e - empty, s - startup, u - cloud, or a .prof file location) followed by a colon and 
# 		      then an ordered list of sections of the CUJ to be added to the profile (one of f - first action, p - preCUJ, m - measuredCUJ, 
#		      or c - preCUJ + measuredCUJ).
# @param (optional) CREATED_PROFILE - the location where we'd like the created profile. By default, the created profile will be located at 
#			              "/tmp/build_created_profile.prof"
#


# If we want to force this profile to be built directly from the base profile, we can use --no-caching as the first argument, and a signature will be 
# applied to all created profiles (so that they are distinct from pre-used versions and cannot be reused on later calls)
if [ $1 = "--no-caching" ] || [ $1 = "-NC" ] 
then
	SIGNATURE=-NC-$(date +'%m-%d-%Y--%H:%M:%S')
	echo $SIGNATURE
	shift
fi



INPUT_FILE=${1?"ERROR: need to provide an input file and a compilation flag sequence (e.g. amppc)"}
COMPILATION_SETTING=${2?"ERROR: need to provide an input file and a compilation setting"}
CREATED_PROFILE=${3:-"/tmp/build_created_profile.prof"}
PRE_CUJ=$(sed '1q;d' $INPUT_FILE)
INPUT_FILE_NAME="${INPUT_FILE##*/}" #remove folders from file name
INPUT_FILE_NAME="${INPUT_FILE_NAME%.*}" #remove file extension from file name
CLOUD_PROFILE="utilityProfiles/cloudProfile.prof" #location of the saved cloud profile
EMPTY_PROFILE="utilityProfiles/empty.prof" #location of an empty profile
STARTUP_PROFILE="utilityProfiles/startup.prof" #location of an startup profile
CUR_PROFILE="/data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof" #location of the cloud profile on the device
TEMP_PHONE_PROFILE="/sdcard/temp_profile.prof"
STASHING_COMPILED_ACTIONS="/tmp/manipulate_compiled_actions.txt" #Contains the actions used to compile, in case callee wants it
SAVED_UTILITY_FOLDER="utilityProfiles/${INPUT_FILE_NAME}"
mkdir -p $SAVED_UTILITY_FOLDER



BASE_PROFILE="${COMPILATION_SETTING%:*}" #Returns string before last ':'
COMPILATION_FLAG_SEQ="${COMPILATION_SETTING##*:}" #returns string after last ':'
COMPILATION_FLAG_SEQ_STARTING_IDX=0 #By default, we execute all of the actions in the COMPILATION_FLAG_SEQ

echo "BASE PROFILE:      $BASE_PROFILE"
echo "COMPILATION FLAGS: ${COMPILATION_FLAG_SEQ}"

echo "Resetting the profile...."
adb shell cmd package compile --reset com.google.android.apps.maps

echo "Setting the inital working profile..."
#if we've already created a prefix of this profile set the longest prefix to be the initial profile, and mark the starting index at which we should start building
PREFIX_FOUND="false"
for ((i=${#COMPILATION_FLAG_SEQ};i>=0;i--))
do
	COMPILATION_FLAG_SEQ_PREFIX=${COMPILATION_FLAG_SEQ:0:i} #prefix of length i
	SAVED_PROFILE_PREFIX="${SAVED_UTILITY_FOLDER}/${BASE_PROFILE}:${COMPILATION_FLAG_SEQ_PREFIX}${SIGNATURE}.prof"
	if [ -f "$SAVED_PROFILE_PREFIX" ] 
	then
		echo "Prefix profile $SAVED_PROFILE_PREFIX found! Now executing actions starting from index $i."
		cp $SAVED_PROFILE_PREFIX $CREATED_PROFILE
		COMPILATION_FLAG_SEQ_STARTING_IDX=$i #The index in the COMPILATION_FLAG_SEQ where we will start building from
		echo -n "Base: $SAVED_PROFILE_PREFIX, Actions:" > $STASHING_COMPILED_ACTIONS
		PREFIX_FOUND="true"
		break
	fi

done

#If no prefix was found, case on the base profile
SAVING_PROFILE="true" #Unless we're given an explicit profile, we'll save all intermediate profiles 
if [ $PREFIX_FOUND = "false" ]
then
	echo "No prefix profile found. Starting from scratch."
	#If we're given a file name as the base, copy it to the working profile and note that we won't be saving any profiles in the utilityProfiles directory
	if [ -f "$BASE_PROFILE" ] && [ "${BASE_PROFILE##*.}" = "prof" ]
	then
		SAVING_PROFILE="false"
		cp $BASE_PROFILE $CREATED_PROFILE
		echo -n "Base: $BASE_PROFILE, Actions:" > $STASHING_COMPILED_ACTIONS
	#Otherwise, set the base working profile depending on the flag specified by the first character
	elif [ "$BASE_PROFILE" = "e" ]
	then
		cp $EMPTY_PROFILE $CREATED_PROFILE
		echo -n "Base: Empty, Actions:" > $STASHING_COMPILED_ACTIONS
	elif [ "$BASE_PROFILE" = "u" ]
	then
		cp $CLOUD_PROFILE $CREATED_PROFILE	
		echo -n "Base: Cloud, Actions:" > $STASHING_COMPILED_ACTIONS
	elif [ "$BASE_PROFILE" = "s" ]
	then
		cp $STARTUP_PROFILE $CREATED_PROFILE	
		echo -n "Base: Startup, Actions:" > $STASHING_COMPILED_ACTIONS
	else
		echo "ERROR: invalid base profile: \"${BASE_PROFILE}\""
		exit 1
	fi
fi


for ((i=$COMPILATION_FLAG_SEQ_STARTING_IDX; i<${#COMPILATION_FLAG_SEQ}; i++))
do
	COMPILATION_FLAG="${COMPILATION_FLAG_SEQ:$i:1}"

	if [ "$COMPILATION_FLAG" != "c" ] && [ "$COMPILATION_FLAG" != "p" ] && [ "$COMPILATION_FLAG" != "f" ] && [ "$COMPILATION_FLAG" != "m" ] 
	then	
		echo "Builder actions flag: $COMPILATION_FLAG is invalid"
		exit 1
	fi

	if [ "$COMPILATION_FLAG" = "m" ]  && [ "$PRE_CUJ" != "" ]
	then 
		
		echo "Executing preparatory actions.."
		./runCujNTimes $INPUT_FILE p 1

		echo "Waiting for prepatory actions to be added to the profile..."
		sleep 60
	fi
	

	echo "Pushing our working profile to the device.."
	adb push $CREATED_PROFILE $TEMP_PHONE_PROFILE

	echo "Setting the working profile to be the cur profile"
	adb shell cp $TEMP_PHONE_PROFILE $CUR_PROFILE


	echo "Executing the actions we'd like in the profile..."
	./runCujNTimes $INPUT_FILE $COMPILATION_FLAG 1
	adb logcat -c #No clue why, but if we clear before executing the these actions, then postCUJ actions might appear when we scrape logcat, but if we clear here, these measured actions stay and postCUJ actions are cleared
	
	echo "Waiting for the desired actions to be added to the profile..."
	sleep 60

	echo "Verifying and logging which actions were executed"
	COMPILED_ARR=$(adb logcat -s "actions-run" -v raw -d | sed -n -e '/^\[/p')
	echo -n " ${COMPILED_ARR}" >> $STASHING_COMPILED_ACTIONS

	echo "Pulling the current profile"
	adb pull $CUR_PROFILE $CREATED_PROFILE

	echo "Getting profile size..."
	adb shell stat -c%s $CUR_PROFILE

	#When a flag is followed by r, runCUjNTimes will execute the rest of the profile leaving off from the section specified by the flag.
	echo "Finishing the CUJ..." 
	./runCujNTimes $INPUT_FILE ${COMPILATION_FLAG}r 1


	#Want to make sure that app is stopped when we mess with the profiles at start of the loop in callee
	echo "Force stopping Maps..." 
	adb shell am force-stop com.google.android.apps.maps


	if [ "$SAVING_PROFILE" = "true" ]
	then
		echo "Saving a prefix profile..."
		COMPILATION_FLAG_SEQ_PREFIX=${COMPILATION_FLAG_SEQ:0:i+1} #prefix up to the character at index i
		SAVED_PROFILE_PREFIX="${SAVED_UTILITY_FOLDER}/${BASE_PROFILE}:${COMPILATION_FLAG_SEQ_PREFIX}${SIGNATURE}.prof"
		echo "SPP: $SAVED_PROFILE_PREFIX"
		cp $CREATED_PROFILE $SAVED_PROFILE_PREFIX
	fi
done


