#!/usr/bin/env bash

#Copyright 2020 Google LLC
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


##
# Iterates through the desired CUJ the NUM_ITERS times and measures the POST_CUJ each time. Optionally produces a clip of the iteration with the median total duration. 
# Formatted data gets sent to /tmp/time_data.txt and raw action duration averages get sent to /tmp/raw_averages.txt for callee processing.
#
# @param INPUT_FILE (Formatted with the following on consecutive lines: PRE-CUJ, POST_CUJ, NUM_ITERS, and optionally RECORD (a line with an "r" to indicate that you'd like to record). See CUJS/ for an example file.
# 

INPUT_FILE=${1:-input.txt}
PRE_CUJ=$(sed '1q;d' $INPUT_FILE)
POST_CUJ=$(sed '2q;d' $INPUT_FILE)
POST_CUJ_STR_ARRAY=$(./peelHardBrackets $POST_CUJ)
NUM_ITERS=$(sed '3q;d' $INPUT_FILE)
RECORD=$(sed '4q;d' $INPUT_FILE)
if [ "$RECORD" != "r" ] && [ "$RECORD" != "f" ]
then 
	RECORD="n"
fi

STASHING_SUMMARY_TABLE="/tmp/execute_summary_table.txt"
STASHING_RAW_DURATIONS="/tmp/execute_raw_durations.txt"


#replace other single quotes by the one recognized by the test
PRE_CUJ=${PRE_CUJ//\‘/\'}
PRE_CUJ=${PRE_CUJ//\’/\'}
POST_CUJ=${POST_CUJ//\‘/\'}
POST_CUJ=${POST_CUJ//\’/\'}

#use escape char to allow special characters (which would terminate the argument in the am instrument command or do other undesirable things).
SpecialChars=(";"  "'" "&" "%" "(" ")" "^" "#" "@" "!" "+")
for char in ${SpecialChars[@]}; do
	exp="\\${char}"
	PRE_CUJ=${PRE_CUJ//$exp/\\$char}
	POST_CUJ=${POST_CUJ//$exp/\\$char}
done
# Wrap strings in \" to allow for spaces within them. 
PRE_CUJ="\\\"$PRE_CUJ\\\""
POST_CUJ="\\\"$POST_CUJ\\\""

adb logcat -c

./gradlew installDebugAndroidTest

RECSTART=$(( $(adb shell date '+%s%N') / 1000000))
if [ "$RECORD" = "r" ] || [ "$RECORD" = "f" ] 
then 
	adb shell "screenrecord /sdcard/full_video.mp4" &
	PID=$!
fi 

#adb shell am force-stop com.google.android.apps.maps
cmd="adb shell am instrument -w -e class com.example.firstapp.UserCujTest#userIterateAndMeasureCuj -e pre $PRE_CUJ -e post $POST_CUJ -e iters $NUM_ITERS -e rec $RECORD -e recstart $RECSTART com.example.firstapp.test/androidx.test.runner.AndroidJUnitRunner"
eval $cmd

LOGGED_DATA=$(adb logcat -s "durations-raw" -v raw -d | sed -n -e '/^\[/p')
./peelHardBrackets "$LOGGED_DATA" > $STASHING_RAW_DURATIONS 

if [ "$RECORD" = "r" ] 
then 
	kill $PID 
	adb pull sdcard/full_video.mp4 
	adb pull sdcard/full_video.mp4  #for some reason, the first pull sometimes doesn't always get the "moov" atom, which we need. Pulling twice seems to always do the trick...
	java dataAggregation.AggregateExecuteCuj "$STASHING_RAW_DURATIONS" "$STASHING_SUMMARY_TABLE" "$POST_CUJ_STR_ARRAY" "$NUM_ITERS" "." "true"
elif [ "$RECORD" = "f" ]
then 
	kill $PID 
	adb pull sdcard/full_video.mp4 
	adb pull sdcard/full_video.mp4  #for some reason, the first pull sometimes doesn't always get the "moov" atom, which we need. Pulling twice seems to always do the trick...
	java dataAggregation.AggregateExecuteCuj "$STASHING_RAW_DURATIONS" "$STASHING_SUMMARY_TABLE" "$POST_CUJ_STR_ARRAY" "$NUM_ITERS" "." "false"
else
	java dataAggregation.AggregateExecuteCuj "$STASHING_RAW_DURATIONS" "$STASHING_SUMMARY_TABLE" "$POST_CUJ_STR_ARRAY" "$NUM_ITERS" "." "false"
fi	

adb logcat -s "action-completion" -v raw -d | sed -n -e '/^Executed/p'
