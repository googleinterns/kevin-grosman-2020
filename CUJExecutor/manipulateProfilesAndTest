#!/usr/bin/env bash

#Copyright 2020 Google LLC
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


##
# Compiles aGMM according to the COMPILATION_FLAG and then measures the CUJ specified by the INPUT_FILE (as specified by executeCUJ).
# Stores the following files at /profile_test_data/<INPUT_FILE_NAME>/<COMPILATION_FLAG>/<DATE>/:
# - (command_summary.txt) a log of each run command and their output.
# - (short_summary.txt) a formatted summary including the profile used for compilation, resulting app size and measurements of the POST_CUJ (acquired via a call to executeCUJ). A copy is stored in /tmp for the callee.
# - (saved_profile.prof) the profile used to compile the app (if applicable). 
# - (median_clip.mp4) a recording of the median iteration (if requested).
#
# @param INPUT_FILE (Formatted with the following on consecutive lines: PRE-CUJ, POST_CUJ, NUM_ITERS, and optionally RECORD (a line with an "r" to indicate that you'd like to record). See CUJS/ for an example file.
# @param COMPILATION_FLAG (e - empty profile, p - compile actions in Pre-CUJ, c - compile entire CUJ, a - compile all code).

# Example: ./manipulateProfilesAndTest CUJS/takeout.txt p
# Result: Will reset the profile attempt to add actions in the pre-CUJ to it. Then re-compiles the app according to that profile and measures the CUJ specified by CUJS/takeout.txt.




#PARSING INPUTS:
INPUT_FILE=${1:-input.txt}
COMPILATION_FLAG=${2?"ERROR: need to specify a compilation flag"} 
NUM_WARMUP_ITERS=${3:-1} #Number of times we run through the portion of the CUJ if we're doing a f, p, or c test (1 by default)
if [ $COMPILATION_FLAG != "e" ] && [ $COMPILATION_FLAG != "p" ] && [ $COMPILATION_FLAG != "c" ] && [ $COMPILATION_FLAG != "a" ] && [ $COMPILATION_FLAG != "f" ] && [ $COMPILATION_FLAG != "u" ] && [ $COMPILATION_FLAG != "m" ]  
then
	echo "compilation flag invalid. Use one of {e - empty profile, p - compile actions in Pre-CUJ, c - compile entire CUJ, a - compile all code, f - compile first action, u - compile using cloud profile, m - compile only using tthe measured CUJ}"
	exit 1	
fi	

echo $COMPILATION_FLAG

#Initializing variables
INPUT_FILE_NAME="${INPUT_FILE##*/}"
INPUT_FILE_NAME="${INPUT_FILE_NAME%.*}"
RECORD=$(sed '4q;d' $INPUT_FILE)
STASHED_SUMMARY_TABLE="/tmp/execute_summary_table.txt"

#PREPARING OUTPUTS:
DATE=$(date '+%m-%d-%Y--%H:%M:%S')
HEADER_FOOTER="\n--------------------------------COMPILATION SETTING: ${COMPILATION_FLAG}----------${DATE}-------------------------------"
#Generate the appropriate folder hierarchy if it doesn't already exist
FOLDER="profile_test_data/${INPUT_FILE_NAME}"
mkdir $FOLDER 2> /dev/null
FOLDER="profile_test_data/${INPUT_FILE_NAME}/${COMPILATION_FLAG}"
mkdir $FOLDER 2> /dev/null
FOLDER="profile_test_data/${INPUT_FILE_NAME}/${COMPILATION_FLAG}/${DATE}"
mkdir $FOLDER 2> /dev/null
CLOUD_PROFILE="utilityProfiles/cloudProfile.prof" #location of the saved cloud profile
EMPTY_PROFILE="utilityProfiles/empty.prof" #location of an empty profile
CUR_PROFILE="/data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof" #location of the cloud profile on the device
STASHING_APP_SIZE="/tmp/manipulate_app_size.txt" #Contains final app size in case callee (e.g. mega_test) wants it
STASHING_CREATED_PROFILE="/tmp/manipulate_created_profile.txt" #Contains t
STASHING_COMPILED_ACTIONS="/tmp/manipulate_compiled_actions.txt" #Contains the actions used to compile, in case callee (e.g. mega_test) wants it
STASHING_FOLDER="/tmp/manipulate_folder.txt" #Contains the name of the folder where files for this test live in case callee (e.e. mega_test) wants it
COMMAND_SUMMARY="${FOLDER}/command_summary.txt" #contains full summary commands and raw outputs
SHORT_SUMMARY="${FOLDER}/short_summary.txt" #contains short summary of time data and size of profile/app
STASHING_SHORT_SUMMARY="/tmp/manipulate_short_summary.txt" #copy of short summary in case callee (e.g. mega_test) wants it
SAVED_PROFILE="${FOLDER}/saved_profile.prof" #contains short summary of time data and size of profile/app
MEDIAN_CLIP="${FOLDER}/median_clip.mp4" #contains a clip of the median run if one is requested
FULL_CLIP="${FOLDER}/full_video.mp4" #contains a clip of the full run if one is requested

echo "" > $COMMAND_SUMMARY

#spit command output to Full_Summary and echo it
function spitToFull() {
	cmd="$1"
	echo "----------------------------------" >> $COMMAND_SUMMARY
	echo "EXECUTING COMMAND:" >> $COMMAND_SUMMARY
	echo "$cmd" >> $COMMAND_SUMMARY
	echo "RAW OUTPUT: " >> $COMMAND_SUMMARY
	output=$(eval $cmd)
	echo "$output" >> $COMMAND_SUMMARY
	echo "$output" 
}


#ADD HEADER FOR DATA
echo -e $HEADER_FOOTER > $SHORT_SUMMARY
echo "SIZE DATA:" >> $SHORT_SUMMARY
echo "" >> $SHORT_SUMMARY


echo "Resetting the profile...."
output=$(spitToFull "adb shell cmd package compile --reset com.google.android.apps.maps")


#Get the desired actions into the profile:
if [ "$COMPILATION_FLAG" = "c" ] || [ "$COMPILATION_FLAG" = "p" ] || [ "$COMPILATION_FLAG" = "f" ] || [ "$COMPILATION_FLAG" = "m" ]
then
	

 	if [ "$COMPILATION_FLAG" = "c" ] || [ "$COMPILATION_FLAG" = "p" ] || [ "$COMPILATION_FLAG" = "f" ] 	
	then 
		adb logcat -c
		echo "Executing the actions we'd like in the profile..."
		output=$(spitToFull "./runCujNTimes $INPUT_FILE $COMPILATION_FLAG $NUM_WARMUP_ITERS")
	elif [ "$COMPILATION_FLAG" = "m" ] 
	then 
		echo "Executing preparatory actions.."
		output=$(spitToFull "./runCujNTimes $INPUT_FILE p $NUM_WARMUP_ITERS")

		echo "Waiting for prepatory actions to be added to the profile..."
		output=$(spitToFull "sleep 60")

		adb logcat -c
		echo "Pushing empty profile..."
		output=$(spitToFull "adb push $EMPTY_PROFILE $CUR_PROFILE")

		echo "Restoring profile permissions"
		output=$(spitToFull "adb shell chmod a+rw $CUR_PROFILE")

		echo "PAUSE THIS SHIT NOW"
		sleep 30

		echo "Executing measured actions..."
		output=$(spitToFull "./runCujNTimes $INPUT_FILE m $NUM_WARMUP_ITERS")
	fi


	echo "Verifying and logging which actions were executed"
	COMPILED_ARR=$(spitToFull "adb logcat -s "actions-run" -v raw -d | sed -n -e '/^\[/p'")
	echo $COMPILED_ARR > $STASHING_COMPILED_ACTIONS
	
	echo "Waiting for the desired actions to be added to the profile..."
	output=$(spitToFull "sleep 60")

	echo "Stashing the profile..."
	output=$(spitToFull "adb pull $CUR_PROFILE $STASHING_CREATED_PROFILE")

	echo "Finishing the CUJ..."
	output=$(spitToFull "./runCujNTimes $INPUT_FILE ${COMPILATION_FLAG}r 1")
	
	echo "Force stopping Maps..."
	output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")

	echo "Pushing the stashed profile..."
	output=$(spitToFull "adb push $STASHING_CREATED_PROFILE $CUR_PROFILE")

	echo "Restoring profile permissions"
	output=$(spitToFull "adb shell chmod a+rw $CUR_PROFILE")
	
	echo "Saving the profile..."
	output=$(spitToFull "adb pull $CUR_PROFILE $SAVED_PROFILE")
	
	echo "Getting profile size..."
	PROFILE_SIZE=$(spitToFull "adb shell stat -c%s $CUR_PROFILE")
	echo "Size of profile: $PROFILE_SIZE" >> $SHORT_SUMMARY
	
	echo "Recompiling profile..."
	output=$(spitToFull "adb shell cmd package compile -m speed-profile -f com.google.android.apps.maps")

elif [ "$COMPILATION_FLAG" = "a" ] 
then 
	echo "All" > $STASHING_COMPILED_ACTIONS

	echo "Force stopping Maps..."
	output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")
	
	echo "Compiling everything..."
	output=$(spitToFull "adb shell cmd package compile -m everything -f com.google.android.apps.maps")

elif [ "$COMPILATION_FLAG" = "e" ]
then
	echo "None" > $STASHING_COMPILED_ACTIONS

	echo "Getting profile size..."
	PROFILE_SIZE=$(spitToFull "adb shell stat -c%s $CUR_PROFILE")
	echo "Size of profile: $PROFILE_SIZE" >> $SHORT_SUMMARY


elif [ "$COMPILATION_FLAG" = "u" ]
then 
	echo "Those in the Cloud Profile" > $STASHING_COMPILED_ACTIONS

	echo "Pushing the cloud profile..."
	output=$(spitToFull "adb push $CLOUD_PROFILE $CUR_PROFILE")

	echo "Restoring profile permissions"
	output=$(spitToFull "adb shell chmod a+rw $CUR_PROFILE")
	
	echo "Saving the profile..."
	output=$(spitToFull "adb pull $CUR_PROFILE $SAVED_PROFILE")

	echo "Getting profile size..."
	PROFILE_SIZE=$(spitToFull "adb shell stat -c%s $CUR_PROFILE")
	echo "Size of profile: $PROFILE_SIZE" >> $SHORT_SUMMARY
		
	echo "Force stopping Maps..."
	output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")

	echo "Recompiling profile..."
	output=$(spitToFull "adb shell cmd package compile -m speed-profile -f com.google.android.apps.maps")

fi



echo "Getting app size..." #IS THIS "total" value the proper APP SIZE???
output=$(spitToFull "adb shell ls -l /data/app/com.google.android.apps.maps*/oat/arm64")
APP_SIZE=$(echo $output | awk '{print $2}')
echo $APP_SIZE > $STASHING_APP_SIZE

echo "Size of app: $APP_SIZE" >> $SHORT_SUMMARY
echo "" >> $SHORT_SUMMARY
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" >> $SHORT_SUMMARY

echo "Force stopping Maps..."
output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")

echo "Executing and measuring the CUJ..."
output=$(spitToFull "./executeCuj $INPUT_FILE")

#Prepare short summary
cat $STASHED_SUMMARY_TABLE >> $SHORT_SUMMARY
echo -e $HEADER_FOOTER >> $SHORT_SUMMARY
cat $SHORT_SUMMARY > $STASHING_SHORT_SUMMARY
echo "$FOLDER" > "$STASHING_FOLDER"

if [ "$RECORD" = "r" ] && [ -f "median_clip.mp4" ]
then 
	mv median_clip.mp4 $MEDIAN_CLIP
	echo "Path to median video: $MEDIAN_CLIP"
fi

if [ "$RECORD" = "f" ] || [ "$RECORD" = "r" ]
then 
	if  [ -f "full_video.mp4" ]
	then 
		mv full_video.mp4 $FULL_CLIP
		echo "Path to full video: $FULL_CLIP"
	fi
fi

cat $SHORT_SUMMARY
