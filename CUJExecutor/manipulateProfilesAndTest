#!/usr/bin/env bash

#Copyright 2020 Google LLC
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


##compiles the app according to the COMPILATION_FLAG and then measures the cuj specified by the INPUT_FILE 
##stores a command/output summary, a short data summary, the profile used to compile the app (if applicable) 
##and a recording of the median run 



#PARSING INPUTS:
INPUT_FILE=${1:-input.txt}
COMPILATION_FLAG=${2?"ERROR: need to specify a compilation flag"} 
if [ $COMPILATION_FLAG != "e" ] && [ $COMPILATION_FLAG != "p" ] && [ $COMPILATION_FLAG != "c" ] && [ $COMPILATION_FLAG != "a" ] 
then
	echo "compilation flag invalid. Use one of {e - empty profile, p - compile actions in Pre-CUJ, c - compile entire CUJ, a - compile all code}"
	exit 1	
fi	

#Initializing variables
FILE_NAME="${INPUT_FILE##*/}"
FILE_NAME="${FILE_NAME%.*}"
RECORD=$(sed '4q;d' $INPUT_FILE)
TIME_DATA="/tmp/time_data.txt"

#PREPARING OUTPUTS:
DATE=$(date '+%m-%d-%Y--%H:%M:%S')
HEADER_FOOTER="--------------------------------COMPILATION SETTING: ${COMPILATION_FLAG}----------${DATE}-------------------------------"
#Generate the appropriate folder hierarchy if it doesn't already exist
FOLDER="profile_test_data/${FILE_NAME}"
mkdir $FOLDER 2> /dev/null
FOLDER="profile_test_data/${FILE_NAME}/${COMPILATION_FLAG}"
mkdir $FOLDER 2> /dev/null
FOLDER="profile_test_data/${FILE_NAME}/${COMPILATION_FLAG}/${DATE}"
mkdir $FOLDER 2> /dev/null
COMMAND_SUMMARY="${FOLDER}/command_summary.txt" #contains full summary commands and raw outputs
SHORT_SUMMARY="${FOLDER}/short_summary.txt" #contains short summary of time data and size of profile/app
TMP_SHORT_SUMMARY="/tmp/short_summary.txt" #copy of short summary in case other scripts (e.g. mega_test want it)
SAVED_PROFILE="${FOLDER}/saved_profile.prof" #contains short summary of time data and size of profile/app
MEDIAN_CLIP="${FOLDER}/median_clip.mp4" #contains a clip of the median run if one is requested
echo "" > $COMMAND_SUMMARY

#spit command output to Full_Summary and echo it
function spitToFull() {
	cmd="$1"
	echo "----------------------------------" >> $COMMAND_SUMMARY
	echo "EXECUTING COMMAND:" >> $COMMAND_SUMMARY
	echo "$cmd" >> $COMMAND_SUMMARY
	echo "RAW OUTPUT: " >> $COMMAND_SUMMARY
	output=$(eval $cmd)
	echo "$output" >> $COMMAND_SUMMARY
	echo "$output" 
}


#ADD HEADER FOR DATA
echo $HEADER_FOOTER > $SHORT_SUMMARY
echo "SIZE DATA:" >> $SHORT_SUMMARY
echo "" >> $SHORT_SUMMARY

echo "Resetting the profile...."
output=$(spitToFull "adb shell cmd package compile --reset com.google.android.apps.maps")

#Get the desired actions into the profile:
if [ "$COMPILATION_FLAG" = "c" ] || [ "$COMPILATION_FLAG" = "p" ] 
then
	
	echo "Adding the desired actions to the profile..."
	output=$(spitToFull "./runCujNTimes $INPUT_FILE $COMPILATION_FLAG 1")

	echo "Waiting..."
	output=$(spitToFull "sleep 60")

	echo "Force stopping Maps..."
	output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")
	

	echo "Saving the profile..."
	output=$(spitToFull "adb pull /data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof $SAVED_PROFILE")

	echo "Getting profile size..."
	output=$(spitToFull "adb shell ls -l /data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof")
	PROFILE_SIZE=$(adb shell stat -c%s /data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof)
	echo "Size of profile: $PROFILE_SIZE" >> $SHORT_SUMMARY
	
	echo "Recompiling profile..."
	output=$(spitToFull "adb shell cmd package compile -m speed-profile -f com.google.android.apps.maps")

elif [ "$COMPILATION_FLAG" = "a" ] 
then 
	echo "Compiling everything..."
	output=$(spitToFull "adb shell cmd package compile -m everything -f com.google.android.apps.maps")

elif [ "$COMPILATION_FLAG" = "e" ]
then
	echo "Getting profile size..."
	output=$(spitToFull "adb shell ls -l /data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof")
	PROFILE_SIZE=$(adb shell stat -c%s /data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof)
	echo "Size of profile: $PROFILE_SIZE" >> $SHORT_SUMMARY
fi

echo "Getting app size..." #IS THIS "total" value the proper APP SIZE???
output=$(spitToFull "adb shell ls -l /data/app/com.google.android.apps.maps*/oat/arm64")
APP_SIZE=$(echo $output | awk '{print $2}')
echo "Size of app: $APP_SIZE" >> $SHORT_SUMMARY
echo "" >> $SHORT_SUMMARY
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" >> $SHORT_SUMMARY

echo "Executing and measuring the CUJ..."
output=$(spitToFull "./executeCuj $INPUT_FILE")

#Prepare short summary
cat $TIME_DATA >> $SHORT_SUMMARY
echo $HEADER_FOOTER >> $SHORT_SUMMARY
cat $SHORT_SUMMARY > $TMP_SHORT_SUMMARY

if [ "$RECORD" = "r" ] && [ -f "median_clip.mp4" ]
then 
	mv median_clip.mp4 $MEDIAN_CLIP
	echo "output video is called: $MEDIAN_CLIP"
fi

cat $SHORT_SUMMARY
