#!/usr/bin/env bash

#Copyright 2020 Google LLC
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


##
# Compiles aGMM according to the COMPILATION_FLAG_SEQ and then measures the CUJ specified by the INPUT_FILE (as specified by executeCUJ).
# If COMPILATION_FLAG_SEQ is just the location of a profile, this profile is used to compile the app. 
# If the passed value is a sequence of compilation flags, the first indicates the base profile (a- all, e - empty, u - cloud, s - startup) 
# and all subsequent flags represent actions to be added to the profile (f - first action, p - preCUJ, m - measuredCUJ, c - preCUJ + measuredCUJ)
#
# Stores the following files at /profile_test_data/<INPUT_FILE_NAME>/<COMPILATION_FLAG>/<DATE>/:
# - (command_summary.txt) a log of each run command and their output.
# - (short_summary.txt) a formatted summary including the profile used for compilation, resulting app size and measurements of the MEASURED_CUJ (acquired via a call to executeCUJ). A copy is stored in /tmp for the callee.
# - (saved_profile.prof) the profile used to compile the app (if applicable). 
# - (median_clip.mp4) a recording of the median iteration (if requested).
#
# @param INPUT_FILE (Formatted with the following on consecutive lines: PRE-CUJ, MEASURED_CUJ, POST_CUJ, NUM_ITERS, and optionally RECORD (a line with an "r" to indicate that you'd like to record). See CUJS/ for an example file.
# @param COMPILATION_FLAG_SEQ - can either be the location of a .prof file or a sequence of compilation flags for building a new profile, where:
#				the first specifies the base profile (one of a - all, e - empty, s - startup, or u - cloud)
#				and all subsequent flags specify an ordered list of sections of the CUJ to be added to the profile (one of f - first action, p - preCUJ, m - measuredCUJ, or c - preCUJ + measuredCUJ).
# e.g: 
# 
# ./megaTest CUJS/takeout.txt utilityProfiles/cloudProfile.prof
# 	Result: runs a with the cloud profile compiled
# 
# ./megaTest CUJS/takeout.txt smmp
# 	Result: A profile is built by starting with the startup profile and adding to it by executing the measuredCUJ twice and then the preCUJ once (with appropriate waits after all 3 sections of the CUJ are completed). 
#		Then, this profile is used to compile the app and execute/measure the CUJ.




#PARSING INPUTS:
INPUT_FILE=${1?"ERROR: need to specify an input file and compilation flag"}
COMPILATION_FLAG=${2?"ERROR: need to specify an input file and compilation flag"} 

echo $COMPILATION_FLAG

#Initializing variables
INPUT_FILE_NAME="${INPUT_FILE##*/}"
INPUT_FILE_NAME="${INPUT_FILE_NAME%.*}"
RECORD=$(sed '5q;d' $INPUT_FILE)

#PREPARING OUTPUTS:
DATE=$(date '+%m-%d-%Y--%H:%M:%S')
HEADER_FOOTER="\n--------------------------------COMPILATION SETTING: ${COMPILATION_FLAG}----------${DATE}-------------------------------"
#Generate the appropriate folder hierarchy if it doesn't already exist
FOLDER="profile_test_data/${INPUT_FILE_NAME}"
mkdir $FOLDER 2> /dev/null
FOLDER="profile_test_data/${INPUT_FILE_NAME}/${COMPILATION_FLAG}"
mkdir $FOLDER 2> /dev/null
FOLDER="profile_test_data/${INPUT_FILE_NAME}/${COMPILATION_FLAG}/${DATE}"
mkdir $FOLDER 2> /dev/null
CLOUD_PROFILE="utilityProfiles/cloudProfile.prof" #location of the saved cloud profile
EMPTY_PROFILE="utilityProfiles/empty.prof" #location of an empty profile
CUR_PROFILE="/data/misc/profiles/cur/0/com.google.android.apps.maps/primary.prof" #location of the cur profile on the device
REF_PROFILE="/data/misc/profiles/ref/com.google.android.apps.maps/primary.prof" #location of the ref profile on the device
STASHED_SUMMARY_TABLE="/tmp/execute_summary_table.txt"
STASHED_CREATED_PROFILE="/tmp/build_created_profile.txt"
STASHING_APP_SIZE="/tmp/manipulate_app_size.txt" #Contains final app size in case callee (e.g. mega_test) wants it
STASHING_USED_PROFILE="/tmp/manipulate_created_profile.txt" #Contains the profile used to compile
STASHING_COMPILED_ACTIONS="/tmp/manipulate_compiled_actions.txt" #Contains the actions used to compile, in case callee (e.g. mega_test) wants it
STASHING_FOLDER="/tmp/manipulate_folder.txt" #Contains the name of the folder where files for this test live in case callee (e.e. mega_test) wants it
COMMAND_SUMMARY="${FOLDER}/command_summary.txt" #contains full summary commands and raw outputs
SHORT_SUMMARY="${FOLDER}/short_summary.txt" #contains short summary of time data and size of profile/app
STASHING_SHORT_SUMMARY="/tmp/manipulate_short_summary.txt" #copy of short summary in case callee (e.g. mega_test) wants it
SAVED_PROFILE="${FOLDER}/saved_profile.prof" #contains short summary of time data and size of profile/app
MEDIAN_CLIP="${FOLDER}/median_clip.mp4" #contains a clip of the median run if one is requested
FULL_CLIP="${FOLDER}/full_video.mp4" #contains a clip of the full run if one is requested

echo "" > $COMMAND_SUMMARY

#spit command output to Full_Summary and echo it
function spitToFull() {
	cmd="$1"
	echo "----------------------------------" >> $COMMAND_SUMMARY
	echo "EXECUTING COMMAND:" >> $COMMAND_SUMMARY
	echo "$cmd" >> $COMMAND_SUMMARY
	echo "RAW OUTPUT: " >> $COMMAND_SUMMARY
	output=$(eval $cmd)
	echo "$output" >> $COMMAND_SUMMARY
	echo "$output" 
}


#Add header for data
echo -e $HEADER_FOOTER > $SHORT_SUMMARY
echo "SIZE DATA:" >> $SHORT_SUMMARY
echo "" >> $SHORT_SUMMARY






if [ "$COMPILATION_FLAG" = "a" ] 
then 
	echo "All" > $STASHING_COMPILED_ACTIONS

	echo "Force stopping Maps..."
	output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")
	
	echo "Compiling everything..."
	output=$(spitToFull "adb shell cmd package compile -m everything -f com.google.android.apps.maps")

else 	#default case is to attempt to build the profile
	echo "Building the profile..."
	output=$(spitToFull "./buildProfile $INPUT_FILE $COMPILATION_FLAG")
	
	echo "Force stopping Maps..."
	output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")

	echo "Pushing the created profile..."
	output=$(spitToFull "adb push $STASHED_CREATED_PROFILE $CUR_PROFILE")

	echo "Restoring profile permissions"
	output=$(spitToFull "adb shell chmod a+rw $CUR_PROFILE")
	
	echo "Saving the profile..."
	output=$(spitToFull "adb pull $CUR_PROFILE $SAVED_PROFILE")
	
	echo "Recompiling profile..."  
	output=$(spitToFull "adb shell cmd package compile -m speed-profile -f com.google.android.apps.maps")

	echo "Getting profile size..."
	PROFILE_SIZE=$(spitToFull "adb shell stat -c%s $REF_PROFILE")
	echo "Size of profile: $PROFILE_SIZE" >> $SHORT_SUMMARY
fi


echo "Force stopping Maps..."
output=$(spitToFull "adb shell am force-stop com.google.android.apps.maps")

echo "Getting app size..." 
output=$(spitToFull "adb shell ls -l /data/app/com.google.android.apps.maps*/oat/arm64")
APP_SIZE=$(echo $output | awk '{print $2}')
echo $APP_SIZE > $STASHING_APP_SIZE

echo "Size of app: $APP_SIZE" >> $SHORT_SUMMARY
echo "" >> $SHORT_SUMMARY
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" >> $SHORT_SUMMARY

echo "Executing and measuring the CUJ..."
output=$(spitToFull "./executeCuj $INPUT_FILE")

#Prepare short summary
cat $STASHED_SUMMARY_TABLE >> $SHORT_SUMMARY
echo -e $HEADER_FOOTER >> $SHORT_SUMMARY
cat $SHORT_SUMMARY > $STASHING_SHORT_SUMMARY
echo "$FOLDER" > "$STASHING_FOLDER"

if [ "$RECORD" = "r" ] && [ -f "median_clip.mp4" ]
then 
	mv median_clip.mp4 $MEDIAN_CLIP
	echo "Path to median video: $MEDIAN_CLIP"
fi

if [ "$RECORD" = "f" ] || [ "$RECORD" = "r" ]
then 
	if  [ -f "full_video.mp4" ]
	then 
		mv full_video.mp4 $FULL_CLIP
		echo "Path to full video: $FULL_CLIP"
	fi
fi

cat $SHORT_SUMMARY
